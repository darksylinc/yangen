
//#include "SyntaxHighlightingMisc.h"

void header()
{
	// @piece( HeaderCS )
	CONST_BUFFER_STRUCT_BEGIN( HeightmapToNormalParams, 0 )
	{
		uint2 heightMapResolution;
		uint heightMapArrayIdx;
		float depthScale;
	}
	CONST_BUFFER_STRUCT_END( p );
	// @end
}

void body( uint3 gl_GlobalInvocationID )
{
	// @piece( BodyCS )

	uint2 iuv = uint2( gl_GlobalInvocationID.xy );

	uint3 xN01;
	xN01.x = max( iuv.x, 1u ) - 1u;
	xN01.y = iuv.x;
	xN01.z = min( iuv.x + 1u, p.heightMapResolution.x );
	uint3 yN01;
	yN01.x = max( iuv.y, 1u ) - 1u;
	yN01.y = iuv.y;
	yN01.z = min( iuv.y + 1u, p.heightMapResolution.y );

	// Watch out! It's heightXY, but OGRE_LoadArray2D uses YX.
	float heightNN =
		OGRE_LoadArray2D( heightMapTex, uint2( xN01.x, yN01.x ), p.heightMapArrayIdx, 0 ).x *
		p.depthScale;
	float heightN0 =
		OGRE_LoadArray2D( heightMapTex, uint2( xN01.y, yN01.x ), p.heightMapArrayIdx, 0 ).x *
		p.depthScale;
	float heightN1 =
		OGRE_LoadArray2D( heightMapTex, uint2( xN01.z, yN01.x ), p.heightMapArrayIdx, 0 ).x *
		p.depthScale;

	float height0N =
		OGRE_LoadArray2D( heightMapTex, uint2( xN01.x, yN01.y ), p.heightMapArrayIdx, 0 ).x *
		p.depthScale;
	float height00 =
		OGRE_LoadArray2D( heightMapTex, uint2( xN01.y, yN01.y ), p.heightMapArrayIdx, 0 ).x *
		p.depthScale;
	float height01 =
		OGRE_LoadArray2D( heightMapTex, uint2( xN01.z, yN01.y ), p.heightMapArrayIdx, 0 ).x *
		p.depthScale;

	float height1N =
		OGRE_LoadArray2D( heightMapTex, uint2( xN01.x, yN01.z ), p.heightMapArrayIdx, 0 ).x *
		p.depthScale;
	float height10 =
		OGRE_LoadArray2D( heightMapTex, uint2( xN01.y, yN01.z ), p.heightMapArrayIdx, 0 ).x *
		p.depthScale;
	float height11 =
		OGRE_LoadArray2D( heightMapTex, uint2( xN01.z, yN01.z ), p.heightMapArrayIdx, 0 ).x *
		p.depthScale;

	float3 vNN = float3( -1.0f, heightNN, -1.0f );
	float3 vN0 = float3( -1.0f, heightN0, 0 );
	float3 vN1 = float3( -1.0f, heightN1, 1.0f );

	float3 v0N = float3( 0, height0N, -1.0f );
	float3 v00 = float3( 0, height00, 0 );
	float3 v01 = float3( 0, height01, 1.0f );

	float3 v1N = float3( 1.0f, height1N, -1.0f );
	float3 v10 = float3( 1.0f, height10, 0 );
	float3 v11 = float3( 1.0f, height11, 1.0f );

	float3 vNormal = float3( 0, 0, 0 );

	vNormal += cross( ( v01 - v00 ), ( v11 - v00 ) );
	vNormal += cross( ( v11 - v00 ), ( v10 - v00 ) );
	vNormal += cross( ( v10 - v00 ), ( v1N - v00 ) );
	vNormal += cross( ( v1N - v00 ), ( v0N - v00 ) );
	vNormal += cross( ( v0N - v00 ), ( vNN - v00 ) );
	vNormal += cross( ( vNN - v00 ), ( vN0 - v00 ) );
	vNormal += cross( ( vN0 - v00 ), ( vN1 - v00 ) );
	vNormal += cross( ( vN1 - v00 ), ( v01 - v00 ) );

	vNormal = normalize( vNormal );

	// vNormal = vNormal * 0.5f + 0.5f;

	OGRE_imageWrite2DArray4( outNormalMap, uint3( iuv, 0u ), float4( vNormal, 1.0f ) );

	// @end
}
