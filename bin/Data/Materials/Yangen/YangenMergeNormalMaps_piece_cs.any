
//#include "SyntaxHighlightingMisc.h"

void header()
{
	// @piece( HeaderCS )
	/// Reoriented Normal Mapping (RNM) implementation
	///
	/// See https://blog.selfshadow.com/publications/blending-in-detail/
	///
	/// Note the code on that website assumes the normals are in [0; 1]
	/// format whereas ours are in [-1;1] hence the slightly different coefficients
	INLINE float3 rnmBlend( float3 normalBase, float3 normalDetail )
	{
		float3 t = normalBase.xyz + float3( 0.0f, 0.0f, 1.0f );
		float3 u = normalDetail.xyz * float3( -1.0f, -1.0f, 1.0f );
		// t.z += 0.0001; // We know normalBase.z is never negative so this isn't needed
		float3 r = t * dot( t, u ) / t.z - u;
		return normalize( r );
	}

	INLINE float3 pow3( float3 value, float exp )
	{
		return float3( pow( value.x, exp ), pow( value.y, exp ), pow( value.z, exp ) );
	}
	// @end
}

void body( uint3 gl_GlobalInvocationID )
{
	// @piece( BodyCS )

	int2 iuv = int2( gl_GlobalInvocationID.xy );

	float3 nm0 = OGRE_Load2D( normalMap0, iuv, 0 ).xyz;
	float3 nm1 = OGRE_Load2D( normalMap1, iuv, 0 ).xyz;
	float3 nm2 = OGRE_Load2D( normalMap2, iuv, 0 ).xyz;

	nm0 = pow3( abs( nm0 ), p_steepness.x ) * sign( nm0 );
	nm1 = pow3( abs( nm1 ), p_steepness.y ) * sign( nm1 );
	nm2 = pow3( abs( nm2 ), p_steepness.z ) * sign( nm2 );

	float3 finalNormal;
	finalNormal = rnmBlend( nm2, nm1 );
	finalNormal = rnmBlend( finalNormal, nm0 );

	if( finalNormal.z < 0 )
	{
		finalNormal.z = 0;
		if( finalNormal.x == 0 && finalNormal.y == 0 )
			finalNormal.z = 1.0;
		finalNormal = normalize( finalNormal );
		finalNormal = lerp( finalNormal, nm1, 0.9f );
		finalNormal = normalize( finalNormal );
	}

	OGRE_imageWrite2DArray4( outNormalMap, uint3( iuv, 0u ), float4( finalNormal, 1.0f ) );

	// @end
}
