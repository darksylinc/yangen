//----------------------------------------------------------------------
//	Copyright (C) 2020-present Matias N. Goldberg ("dark_sylinc")
//  Under MIT License
//  This file is part of Yangen.
//----------------------------------------------------------------------

#pragma once

/**
@file
Subclass of YangenWindowImpl, which is generated by wxFormBuilder.
*/

#include "OgreFrameListener.h"
#include "OgreLog.h"
#include "OgrePrerequisites.h"

class wxOgreRenderWindow;
class wxAuiManager;
class wxAuiNotebook;
class wxAuiManagerEvent;

class TexturePanelImpl;
class VisualizationPanelImpl;

#include "../../src/Autogenerated/wxYangen.h"
#include "wxOgreRenderWindowListener.h"

#include "CmdSettings.h"

namespace Ogre
{
	class MaterialSwitcher;
	class YangenManager;
}  // namespace Ogre

namespace TF
{
	class CameraController;
}

class ResourceListener;

//// end generated include

/** Implementing YangenWindowImpl */
class YangenWindowImpl : public YangenWindow,
						 public wxOgreRenderWindowListener,
						 public Ogre::FrameListener,
						 public Ogre::LogListener
{
	wxAuiManager *m_wxAuiManager;
	wxTextCtrl *  m_ogreLog;

	Ogre::Root *               m_root;
	Ogre::SceneManager *       m_sceneManager;
	Ogre::Camera *             m_camera;
	Ogre::CompositorWorkspace *m_workspace;
	ResourceListener *         m_resourceListener;

	wxOgreRenderWindow *    m_wxOgreRenderWindow;
	wxAuiNotebook *         m_mainNotebook;
	TexturePanelImpl *      m_texturePanelImpl;
	VisualizationPanelImpl *m_visualizationPanelImpl;

	// Control camera movement through mouse
	bool m_wasLeftPressed;
	bool m_wasRightPressed;
	int  m_mouseX;  // wxWidgets doesn't send us delta, so we have to save last
	int  m_mouseY;  // event's data and calculate delta ourselves

	TF::CameraController *m_cameraController;

	Ogre::YangenManager *   m_yangenManager;
	Ogre::MaterialSwitcher *m_materialSwitcher;

	Ogre::Item *     m_previewItem;
	Ogre::SceneNode *m_previewSceneNode;

	wxString m_lastOpenDir;

	// Directory where we have write access to write our settings
	std::string m_configDirectory;

	void loadSettings();
	void initOgre( bool bForceSetup );
	void createSystems();
	void addResourceLocation( const Ogre::String &archName, const Ogre::String &typeName,
							  const Ogre::String &secName );
	void loadResources();
	void registerHlms();
	void createLogWindow( bool bShow );

	void createPlaneMesh();
	void loadPlanePreview();
	void unloadPreview();

	void loadTexture( const Ogre::String &diffuseFullpath, const Ogre::String &heightmapFullpath );

	void stripFilenameFromPath( const wxString &inFullpath, wxString &outFolder );

	void loadTextureDialog( bool bHeightmap );
	void loadTextureDialogBoth();
	void saveTextureDialog();

	// Virtual event handlers, overide them in your derived class
	virtual void OnMenuSelection( wxCommandEvent &event );

public:
	YangenWindowImpl( wxWindow *parent, const CmdSettings &cmdSettings );
	virtual ~YangenWindowImpl();
	//// end generated class members

	Ogre::Root *getRoot() const { return m_root; }

	void setVisualizationMode( uint8_t visualizationMode );

	virtual bool frameStarted( const Ogre::FrameEvent &evt );

	virtual void OnMouseEvents( wxMouseEvent &evt );
	virtual void OnKeyDown( wxKeyEvent &evt );
	virtual void OnKeyUp( wxKeyEvent &evt );
	virtual void messageLogged( const Ogre::String &message, Ogre::LogMessageLevel lml, bool maskDebug,
								const Ogre::String &logName, bool &skipThisMessage );
};
